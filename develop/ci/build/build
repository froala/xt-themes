#!/bin/bash
# ----------------------------------------------------------------------------------------------------------------------
# This script is to generate artefacts of output files - the core theme files. Usually this script is to be executed
# prior to running tests.
# ----------------------------------------------------------------------------------------------------------------------


# - Stop on first error
set -e

# Configurations (BE CAREFUL to not end directories with a "/")
SRC_DIR=develop/src; # source directory for theme files
PREPC_DIR=out/_build; # temporary metascript-ed storage directory

TARGET_DIR=out/build;

CCJS_EXTERN_LOC=develop/ci/build/externs.js;
CCJS_FLAGFILE=develop/ci/build/closure-flags.conf;

# Being creative!
echo -e "\033[33m";
echo "   ___                _ _ _           ";
echo "  / __|___ _ __  _ __(_) (_)_ _  __ _ ";
echo " | (__/ _ \ '  \| '_ \ | | | ' \/ _\` |";
echo "  \___\___/_|_|_| .__/_|_|_|_||_\__, |";
echo "                |_|             |___/ ";
echo -e "\033[0m";

# Clear temporary build path and other output folders
[ -d "${PREPC_DIR}" ] && rm -r "${PREPC_DIR}";
[ -d "${TARGET_DIR}" ] && rm -r "${TARGET_DIR}";
# create target directories
mkdir -p "${PREPC_DIR}";
mkdir -p "${TARGET_DIR}";

# copy all source files to temporary directory
# find ${SRC_DIR} -name "*.js" -exec "cp" "{}" ${PREPC_DIR} ";"

# Run gulp script to add commonjs wrapper to the themes source files
gulp add-wrapper  --source="${SRC_DIR}/*.js" --destination="${PREPC_DIR}";

# Show metascript version banner and process init banner
metac /dev/null;

# 2. Run closure compiler to minify source files

ccjs_start_time=`date +%s`
ccjs_count=0

# Show banner to notify start of process
echo -e "\033[0m\nRunning MetaScript and minifying files using Closure Compiler";

# Iterate on every .js file in source directory and run it through closure compiler
for ccjs_base_path in $(find "${PREPC_DIR}" -name '*.js'); do
    # Ensure the file being processed is a file and not a directory
    if [ ! -f "${ccjs_base_path}" ]; then
        echo -e "Unexpectedly found a file to be directory:\n${ccjs_base_path}";
        exit 1;
    fi

    ccjs_path="${ccjs_base_path#${PREPC_DIR}}"; # extract the path of file sans source
    ccjs_out_path="${TARGET_DIR}${ccjs_path}"; # append target to the path

    # Show banner to notify what is being processed
    echo -n "  ✔︎ ${ccjs_path#/}";

    # Execute closure compiler to minify and store eval and license files
    # Excluded jscomps
    # --jscomp_error=checkVars \ # causing strict type checks
    # --jscomp_error=duplicate \ # causing strict type checks
    # --jscomp_error=invalidCasts \ # causing strict type checks

    # Run metascript on source files and store the files with .meta pre extension
    metascript ${ccjs_base_path} > "${ccjs_base_path}.meta.js" 2>/dev/null; # generates metascript compiled file

    # Run closure compiler on the files generated by metascript
    gulp compile  --source="${ccjs_base_path}.meta.js" --destination="${ccjs_out_path}";
    # ccjs "${ccjs_base_path}.meta.js" --flagfile="${CCJS_FLAGFILE}" --externs="${CCJS_EXTERN_LOC}" > "${ccjs_out_path}";

    # Set a flag if any of the generated file is zero-byte
    if [ ! -s "${ccjs_out_path}" ]; then
    echo -e "\n\033[31mError compiling file \"${ccjs_path}\"\033[0m\n";
    exit 1;
    fi

    # calculate size in echo
    echo " (`ls -lah ${ccjs_out_path} | awk '{ print $5}'` / `ls -lah ${ccjs_base_path}.meta.js | awk '{ print $5}'`)";

    ccjs_count=$((ccjs_count+1)); # counter increment
done
ccjs_end_time=`date +%s`

# Clear temporary build path
if [ -d "${PREPC_DIR}" ]; then
    rm -r "${PREPC_DIR}"
fi

# Show banner to notify end of process
echo -e "\n\033[32m${ccjs_count} file(s) processed in `expr $ccjs_end_time - $ccjs_start_time`s.\033[0m\n";
